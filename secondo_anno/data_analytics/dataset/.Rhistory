#4.
x <- sample(10) < 4
x
which(x)
which(sample(10) < 4)
b <-1
b <-1
?str
str(b)
## Scalari ----
### numeric ----
a <- 10
x <- matrix(c(2,3,5,7,11,13), nrow=3)
x
x <- matrix(c(2,3,5,7,11,13), ncol=3)
x
mx <- matrix(x, ncol=3, byrow=TRUE)
mx
nrow(mx)
ncol(mx)
dim(mx)
dim(mx)[1]
rownames(mx) <- c("A", "B")
colnames(mx) <- c("a", "b", "c")
x[1,]
x[,2]
x
x[,-2]
x[,c(1,3)]
x[,1:2]
## selezione degli elementi: analoga ai vettori ma su due dimensioni
## [riga/righe, colonna/e]
mx[2,1]
mx[2,2]
# selezione di un'intera riga o colonna
mx[2, ]
mx["B", ]
x
x[-c(1,3),]
mx[, c("a", "b")] # possiamo utilizzare anche i nomi di riga o colonna
x <- matrix(1:16, ncol=4)
x
y <- x[c(1,4),2:4]
y
##array: le matrici sono array con due dimensioni,
## ma possono avere anche più di due dimensioni
x <- 1:20
a.x <- array(x, dim=c(5,2,2))
a.x
dim(a.x)
a.x[3,2,1] #la selezione è analoga alle matrici
a.x[ ,2, ]
a.x[-1, ,1]
str(2:4)
?str
y <- matrix(2:4, nrow = 1)    # vettore riga
y
str(y)
y <- matrix(2:4, ncol = 1)    # vettore colonna
y
str(y)
## una matrice è un array
a <- matrix(1:6, ncol = 3, nrow = 2)
is.matrix(a); is.array(a)
## b è un vettore, non più una matrice. dim(b) #NULL
b <- a[,2]
str(b)
is.vector(b)
is.matrix(b)
dim(b)
# notare cosa si ottiene convertendo un vettore in matrice
as.matrix(b)
y <- c(1.2, 3, 0.4, 10)
2*y
crossprod(c(1,2,3), c(0,12,13)) # prodotto scalare tra due vettori
m <- c(1,2,3) %*% c(0,12,13)
m
is.matrix(m)
## prodotto riga per colonna
a <- matrix(c(1,2,3,4), ncol = 2, byrow = T)
b <- matrix(c(1,-1,0,1), ncol = 2, byrow = T)
a; b
a*b
a%*%b
crossprod(a,b)     #t(a) %*% b
tcrossprod(a,b)    #a %*% t(b)
crossprod(t(a),b)
tcrossprod(a,t(b))
X <- matrix(runif(100000),50)
system.time(crossprod(X))
system.time(t(X)%*%X)
a <- matrix(c(1,1,-1,1),nrow=2,ncol=2)
a
solve(a) ##inversa
solve(b)
b <- c(2,4)
solve(a,b) #soluzione del sistema lineare Ax=b => x=A^-1 b
c <- matrix(1:4, nrow = 2)
c
solve(c)
c <- matrix(1:9, nrow = 3)
c
solve(c)
diag(a) #extract the diagonal
diag(b) #diagonal matrix with b elements on the diagonal
diag(3) #identity matrix 3x3
diag(c)
# Liste -----
# collezione di oggetti anche di tipo differente
x <- vector("list", length = 3) # oppure list()
x <- list()
x
x1 <- 1:3
x2 <- c("A", "B", "C", "D", "E")
x3 <- matrix(1:12, nrow=3)
mylist <- list(x1, x2, x3)   #creiamo la lista popolandola con i 3 oggetti
str(mylist)
##selezione degli elementi della lista
mylist[[1]]
mylist[[2]][3]
mylist[[3]]
mylist[[3]][1,1]
l1 <- mylist[[1]]
l1
l1[2]     # o in alternativa:
mylist[[1]][2]
mylist[3][1:2][1:3]
mylist[[3][1:2][1:3]
mylist[[3]][1:2][1:3]
mylist[[3]]
mylist[[3]][1:2]
mylist[[3]][1:3]
mylist[[3]]
mylist[[3]][3,2]
mylist[[3]][3,]
mylist[[3]][1:2]
mylist
mylist[[3]]
mylist[[3]][1:2][1:3]
mylist[[3]]
mylist[[3]][1:2,1:3]
mylist[[3]][1:3,1:2]
2
2
mylist
mylist[[3]][1:2,1:3]
mylist[[3]][1:2,1:3]
x[[1]] <- x1
x[[4]] <- "questo è il quarto elemento della lista x" #creiamo un nuovo elemento
mylist2 <- list(comp1 = x1, comp2 = x2, comp3 = x3)
mylist2$comp1
mylist2$comp2[3]
newlist <- c(mylist,mylist2)
is.list(newlist)
str(newlist)
names(mylist) <- c("A", "B", "C")
names(mylist2)
names(newlist) <- c("A", "B", "C")
newlist[[1]]
newlist$A
newlist[["A"]]
## valori speciali: NULL, TRUE (T), FALSE (F), NaN (not a number), NA (not available), Inf
0/0         #Not a Number
a <- -1/0
a           #-Inf
a-a         #Not a Number
as.numeric("a")
# Factors ----
# vettori per variabili categoriali. Ogni gruppo corrisponde ad un livello
country <- c("Italy","Germany","France","Germany","Germany","Germany",
"France","Italy","Italy","France")
str(country)
countryf <- factor(country) # factor vs as.factor
str(countryf)
is.factor(countryf)
as.factor(country)
levels(countryf)
cbind(country, countryf)
# scegliere la prima classe
?relevel
a <- relevel(countryf, "Italy")
a
#...o scegliere l'ordine delle classi
factor(country, levels = c("Italy", "Germany", "France"))
countryf2 <- countryf
levels(countryf)
levels(countryf2) <- c("Italy", "Germany", "France")
cbind(countryf, countryf2)
cbind.data.frame(countryf, countryf2)
age <- c(47,44,44,40,38,36,42,34,34,44)
tapply(age, countryf, mean)
cbind(age, countryf)
gender <- c(1,1,2,1,1,2,1,2,2,2)
genderf <- factor(gender)
genderf
levels(genderf)
levels(genderf) <- c("F","M")
str(genderf)
x <- c(5, 12, 13, 12)
x <- factor(x)
str(x)
x <- c("1", "1", "0", "1", "1", "0")
x
length(x)
mode(x)
str(x)
x <- factor(x)
x
length(x)
mode(x)
str(x)
levels(x) <- c("m", "f")
x2 <- factor(x, levels = c("1","0"), labels = c("f", "m"))
x2
table(x)
#4. Eseguire le seguenti righe
v1 <- factor(letters[1:5])
levels(v1) <- rev(levels(v1))
v2 <- factor(letters[1:5], levels = rev(letters[1:5]))
v1
v2# Data frames ----
# Data frames ----
# è una lista ma può essere considerata come una matrice con colonne possibilmente di diverso tipo
# le componenti devono essere vettori (numerici, caratteri o logici), fattori, matrici numeriche, liste o altri dataframe
# vettori e matrici devono avere la stessa dimensione
# di solito memorizziamo le variabili nelle colonne e le unità nelle righe
under40 <- age < 40
dat <- data.frame(Country=countryf, Age=age, Sex=genderf,
Under40=under40)
dat$Country
dat[,1]
str(dat)
is.data.frame(dat)
head(dat) #print the first 6 rows
dat[3,2]
dat[1:3, 2:4]
dat[3, ]
x <- dat[, 2]
str(x)
dat[ , c("Age", "Sex")]
dat[ , c(2,3)]
dat[ , 2:3]
str(dat[ , c("Age", "Sex")])
dat["Age"]
str(dat["Age"])
str(dat[,"Age"])
dat$Sex   #selezione di una sola colonna
dat$Under40 <-  NULL
#dat <- dat[, -2]
head(dat)
head(dat)
# impostare la working directory
setwd("~/Documents/School/secondo_anno/data_analytics/dataset/") # o Session -> Set Working Directory or Files tab -> More
getwd()
list.files()
Food <- read.csv("food_coded.csv", header=TRUE)
list.files()
cigarette_data <- read.table("cigarette.txt", header = F)
windmill_data <- read.table("windmill.txt", header = T)
cipolle_data <- read.table("cipolle.dat", header = TRUE)
load("feeling.Rdata")
nazioni <- read.csv("nazioni.csv", stringsAsFactors = FALSE)
list.files("macchine/")
gc()
# impostare la working directory
setwd("~/Documents/School/secondo_anno/data_analytics/dataset/") # o Session -> Set Working Directory or Files tab -> More
getwd()
list.files()
Food <- read.csv("food_coded.csv", header=TRUE)
list.files()
cigarette_data <- read.table("cigarette.txt", header = F)
windmill_data <- read.table("windmill.txt", header = T)
cipolle_data <- read.table("cipolle.dat", header = TRUE)
load("feeling.Rdata")
nazioni <- read.csv("nazioni.csv", stringsAsFactors = FALSE)
list.files("macchine/")
macchine <- read.csv("macchine/macchine.data", header = F, na.strings = "?")
dim(Food)
Food[Food$sports == 1 & Food$vitamins == 1, c("Gender")]
Food[Food$Gender == "Male" & Food$sports == 1, c("fruit_day", "veggie")]
colnames(Food)
Food[Food$Gender == "Male" & Food$sports == 1, c("fruit_day", "veggies_day")]
Food[Food$Gender == "Male" & Food$sports == 1, c("fruit_day", "veggies_day")]
View(Food)
Food[Food$Gender == "Male" & Food$sports == 1, c("fruit_day", "veggies_day")]
Food[Food$Gender == 1 & Food$sports == 1, c("fruit_day", "veggies_day")]
## Importazione dati -----
# impostare la working directory
setwd("~/Documents/School/secondo_anno/data_analytics/dataset/") # o Session -> Set Working Directory or Files tab -> More
getwd()
list.files()
## read.table(<name.file>, <arguments>)
## read.table("../data/mydata.dat", header=T)
## read.csv(<file path + file name>, <arguments>)
Food <- read.csv("food_coded.csv", header=TRUE)
# Disponibile all'indirizzo: https://www.kaggle.com/borapajo/food-choices
# E' possibile leggere i dati anche direttamente dal file xlsx
## install.packages("openxlsx") #or from Packages tab -> Install
## library(openxlsx)            #load the package to use its functions
## a <- read.xlsx("data/food_coded1.xlsx")
list.files()
cigarette_data <- read.table("cigarette.txt", header = F)
windmill_data <- read.table("windmill.txt", header = T)
cipolle_data <- read.table("cipolle.dat", header = TRUE)
load("feeling.Rdata")
nazioni <- read.csv("nazioni.csv", stringsAsFactors = FALSE)
list.files("macchine/")
macchine <- read.csv("macchine/macchine.data", header = F, na.strings = "?")
## Data frame selezione -----
dim(Food)
str(Food)
head(Food)
length(Food)
# per caricare dati con altre estensioni è possibile utilizzare le funzioni
# nel pacchetto: foreign
Food$GPA
Food[, "GPA"]
str(Food[[1]])
Food$Gender[2:7] #selezione degli elementi in una singola variabile
str(Food$Gender)
is.numeric(Food$Gender) #accedendo ad una singola colonna è possibile trattarla come vettore
is.factor(Food$Gender)
Food$Gender <- factor(Food$Gender) #convertiamo la variabile in un factor con 2 livelli
Food$Gender
levels(Food$Gender) <- c("Female","Male") #rinominiamo i livelli
str(Food$Gender)
#quante donne ci sono nel dataset?
sum(Food$Gender == "Female")
#Selezioniamo il peso dei maschi
Food$weight[Food$Gender == "Male"]
Food[Food$Gender == "Male", "weight"]
#selezioniamo le colonne sport e lavoro solo per le donne
#le condizioni sono specificate nel campo dedicato alle righe
Food[Food$Gender == "Female", c("sports", "employment")]
#selezioniamo il genere dei soggetti con sport==1 e vitamine==1
Food[Food$sports == 1 & Food$vitamins == 1, c("Gender")]
Food$Gender[Food$sports == 1 & Food$vitamins == 1]
#selezioniamo i valori fruit day e veggie day per gli studenti maschi che hanno
#dichiarato fare attività sportiva (sport==1)
Food[Food$Gender == "Male" & Food$sports == 1, c("fruit_day", "veggies_day")]
Food.subset <- subset(Food, subset = (Gender == "Male" & sports == 1),
select = c(fruit_day, veggies_day))
Food.subset <- subset(Food, subset = (Gender == "Male" & sports == 1),
select = c(fruit_day, veggies_day))
View(Food.subset)
Food[Food$employment == 1 | Food$employment == 2, -c("weight")]
Food[Food$employment == 1 | Food$employment == 2, -"weight"]
ood[Food$employment == 1 | Food$employment == 2, -c("weight")]
Food[Food$employment == 1 | Food$employment == 2, -c("weight")]
Food[Food$employment == 1 | Food$employment == 2, -48]
48
Food[Food$employment == 1 | Food$employment == 2, -48]
Food$sports
#creiamo un nuovo data frame con studenti maschi con reddito >3,
#salvando nel nuovo oggetto solo le variabili da income a nutritional_check
newdata <- subset(Food, Gender=="Male" & income > 3,
select=c(income:nutritional_check))
str(newdata)
subset(Food, subset = (employment == 1 | employment == 2), select = -weight)
install.packages("insuranceData")
library("insuranceData")
data(AutoBi)
View(AutoBi)
str(AutoBi)
dim(AutoBi)
head(AutoBi, 8)
summary(AutoBi)
